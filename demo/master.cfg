#
# Sample configuration.
#
from chevah.buildbot_configuration_builder.builder import (
    ATTACH_PNG,
    generate_configuration,
    DEFAULT,
    INTERESTED_USERS,
    PARALLEL_GROUP,
    SEQUENTIAL_GROUP,
    SOURCE_COMMAND,
    SLAVE_COMMAND,
    TRY,
    )

global_options = {
    'title': 'ACME Project Buildbot',
    'db_url': 'sqlite:///state.sqlite',
    'buildbotURL': 'http://build.domain.com/',
    'titleURL': 'http://www.domain.com',

    'slavePortnum': 8089,

    'changeHorizon': 500,
    'buildHorizon': 500,
    'eventHorizon': 50,
    'logHorizon': 50,
    'buildCacheSize': 15,

    'logCompressionMethod': 'gz',

    'mergeRequests': True,
    }

web = {
    'interface': '0.0.0.0',
    'port': 8080,
    'htpasswd': '/srv/www/chevah.passwd',
    'authorization': {
        'gracefulShutdown': True,
        'forceBuild': True,
        'forceAllBuilds': True,
        'pingBuilder': True,
        'stopBuild': True,
        'stopAllBuilds': True,
        'cancelPendingBuild': True,
        },
    }


def lookup(user):
    """
    For now just add @domain.tld to all users.
    """
    return user + '@domain.tld'


email = {
    'server': {
        'fromaddr': 'buildbot@domain.com',
        'relayhost': 'smtp.domain.com',
        'useTls': True,
        'smtpPort': 587,
        'smtpUser': 'user@domain.com',
        'smtpPassword': 'pass',
        },

    'user_to_email_mapper': lookup,
    #result, projectName, title, builder
    'subject': '%(result)s %(builder)s',
    }

try_scheduler = {
    'port': 8087,
    'credentials': [('build-config-try-user', 'pass')],
    'environment': 'meta-director',
    }

github = {
    'token': 'invalid-TOKEN',
    }

slaves = {
    DEFAULT: {
        'password': 'password',
        'max_builds': 1,
        'notify_on_missing': 'infrastructure@domain.com',
        },
    'bs1c-lnx-ubuntu1404-x64-29': {},
    'bs1a-lnx-centos7-x64-31': {},
    'bsmeta1b-lnx-ubuntu1204-x86-30': {
        'max_builds': 100,
        },
    'bswin-slave': {},
    'bssolaris-slave': {},
    'local-slave': {},
    }

environments = {
    DEFAULT: {
        'TEST_TYPE': 'normal'
        },
    'linux': {
        'slaves': [
            'bs1c-lnx-ubuntu1404-x64-29',
            'bs1a-lnx-centos7-x64-31',
            'local-slave',
            ],
        },
    'windows': [
        'bswin-slave',
        'local-slave',
        ],
    'solaris': ['bssolaris-slave'],
    'leaks': {
        'slaves': [
            'bs1c-lnx-ubuntu1404-x64-29',
            ],
        'TEST_TYPE': 'leaks',
        'CHEVAH_GC': 'yes',
        },

    'meta-director': [
        'bsmeta1b-lnx-ubuntu1204-x86-30',
        'bs1c-lnx-ubuntu1404-x64-29',
        'local-slave',
        ],
    }

steps = {
    DEFAULT: [
        {'type': SOURCE_COMMAND},
        {
            'name': 'clean',
            'command': ['make', 'clean'],
            'optional': True,
            },
        {
            'type': SLAVE_COMMAND,  # This is the default value.
            'name': 'test',
            'command': ['make', 'test'],
            },
        ],
    }

groups = {
    'post-commit': [
        'leaks',
        'linux',
        'windows'
        ],
    'supported': [
        'linux',
        'windows',
        ],
    'unstable': [
        'solaris',
        ],
    }

gatekeepers = {
    'post-commit': {
        # Run this builder after changes are done on master branch.
        'scheduler': 'master',
        'environment': 'meta-director',
        'stable_timer': 300,
        'steps': [
            {
            'type': SEQUENTIAL_GROUP,
            'name': 'step name all',
            'target': 'post-commit',
            'set_properties': {
                'codecov_token': '1234',
                },
            'copy_properties': ['github_pull_id'],
            },
            ],
        'notifications': {
            'email_all': ['dev@domain.com'],
            },
        },

    'review': {
        'scheduler': TRY,
        'environment': 'meta-director',
        'steps': [{
            'type': PARALLEL_GROUP,
            'name': 'check review step',
            'target': 'supported',
            # Send separate status for each builder from the group.
            'github_send_status': True,
            }],
        'notifications': {
            'email_all': [INTERESTED_USERS],
            },
        # Send a single status for the whole builder.
        'github_send_status': True,
        },

    'merge': {
        'scheduler': TRY,
        'environment': 'meta-director',
        'steps':  [
            {'type': SOURCE_COMMAND},
            {
                'type': PARALLEL_GROUP,
                'name': 'supported',
                'target': 'supported',
                },
            {
                'name': 'merge-commit',
                'command': ['make', 'merge-branch'],
                },
            ],
        'notifications': {
            'email_passing': ['dev@domain.com'],
            'email_error': [INTERESTED_USERS],
            },
        },
    }

projects = {
    DEFAULT: {
        # Default steps for any builder.
        'steps': steps,
        'poll_interval': 60,
        },
    'brink': {
        'repo': 'http://git.chevah.com/brink.git',
        'github_slug': 'chevah/brink',
        'poll_interval': 30,
        'groups': groups,
        'gatekeepers': gatekeepers,
        },
    'compat': {
        'repo': 'http://git.chevah.com/compat.git',
        'github_slug': 'chevah/compat',
        'groups': groups,
        'gatekeepers': gatekeepers,
        # `compat` project has a different set of steps, which are not only
        # owerwriting
        'steps': {
            DEFAULT: [
                {'type': SOURCE_COMMAND},
                {
                    'name': 'deps',
                    'command': ['make', 'deps'],
                    },
                {
                    'name': 'test',
                    'command': ['make', 'pyflakes'],
                    },
                {
                    'name': 'coverage',
                    'always-run': True,
                    'command': ['coverage', 'publish'],
                    },
                ],
            # You can target a specific builder.
            'windows': [
                {'type': SOURCE_COMMAND},
                {
                    'name': 'deps',
                    'command': ['make', 'deps'],
                    },
                {
                    'name': 'test',
                    'command': ['make', 'pyflakes'],
                    },
                {
                    'type': ATTACH_PNG,
                    'name': 'screenshots',
                    'source': 'selenium-screenshot.png',
                    },
                ],
            },
        },
    }

config = {
    'global': global_options,
    'try_scheduler': try_scheduler,
    'github': github,
    'web': web,
    'email': email,
    'slaves': slaves,
    'environments': environments,
    'projects': projects,
    }
BuildmasterConfig = generate_configuration(config)
